service: task-service
frameworkVersion: '4'
# Eliminamos configuraciones de Dashboard para ejecuci√≥n en local

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
  environment:
    TASKS_TABLE: ${param:tasksTableName}
    JWT_SECRET: ${param:jwtSecret}

params:
  default:
    tasksTableName: 'tasks-table-${sls:stage}'
    jwtSecret: '50bd97c0cfe687c43f9fd38036def9f8fc3b5c6dd47de28fab656ed8d1a3fbc5'

functions:
  createTask:
    handler: src/tasks.create
    events:
      - http:
          path: /tasks
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  getTasks:
    handler: src/tasks.getAll
    events:
      - http:
          path: /tasks
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  updateTask:
    handler: src/tasks.update
    events:
      - http:
          path: /tasks/{taskId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  deleteTask:
    handler: src/tasks.delete
    events:
      - http:
          path: /tasks/{taskId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

custom:
  serverless-offline:
    httpPort: 3004
    lambdaPort: 3005
    noPrependStageInUrl: true
  cors:
    origins: 
      - http://localhost:5173
      - http://localhost:3000
      - http://task-manager-frontend-grm.s3-website-us-east-1.amazonaws.com
      - https://task-manager-frontend-grm.s3-website-us-east-1.amazonaws.com
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
    allowCredentials: true

plugins:
  - serverless-offline

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:tasksTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: taskId
            AttributeType: S
        KeySchema:
          - AttributeName: taskId
            KeyType: HASH
